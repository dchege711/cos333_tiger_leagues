"""
test_fixture_generator.py

Sanity tests the fixture generation algorithm.

"""

import sys
sys.path.insert(0, "..")

from tiger_leagues import league

def test_fixture_generator():
    """
    Asserts that the fixtures generated by the fixture generator module include 
    every possible match in a feasible schedule.

    @raises ValueError if the generated fixtures do not meet the criteria.
    """

    def check_fixtures(players):
        """
        @param List `players` a list of unique player IDs
        @raises ValueError if the generated fixtures do not meet the criteria.
        """
        players_set = set(players)
        assert len(players_set) == len(players)

        fixtures = league.get_fixtures(players)
        for current_matches in fixtures:
            not_yet_played = players_set

            def __check_player(player):
                if player is None: return
                try:
                    not_yet_played.remove(player_a)
                except KeyError:
                    raise ValueError("Invalid pairing: {}".format(str(current_matches)))

            for player_a, player_b in current_matches:
                __check_player(player_a)
                __check_player(player_b)
                
            if not_yet_played:
                raise ValueError(
                    "{} are missing games in {}".format(
                        str(not_yet_played), str(current_matches)
                    )
                )

    print("Testing an even-length list...")
    check_fixtures(list(range(10)))

    print("Testing an odd-length list...")
    check_fixtures(list(range(9)))
